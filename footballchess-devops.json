// .devcontainer/devcontainer.json
{
  "name": "FootballChess Development",
  "image": "mcr.microsoft.com/devcontainers/javascript-node:18",
  "features": {
    "ghcr.io/devcontainers/features/docker-in-docker:2": {},
    "ghcr.io/devcontainers/features/github-cli:1": {}
  },
  "forwardPorts": [3000, 19000, 19001, 19002, 8081],
  "postCreateCommand": "npm install",
  "customizations": {
    "vscode": {
      "extensions": [
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        "ms-vscode.vscode-typescript-next",
        "bradlc.vscode-tailwindcss",
        "csstools.postcss",
        "formulahendry.auto-rename-tag",
        "ms-azuretools.vscode-docker",
        "christian-kohler.path-intellisense",
        "naumovs.color-highlight",
        "ms-playwright.playwright"
      ],
      "settings": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": {
          "source.fixAll.eslint": true
        }
      }
    }
  },
  "portsAttributes": {
    "3000": {
      "label": "Web App",
      "onAutoForward": "openPreview"
    },
    "19000": {
      "label": "Expo Server"
    },
    "19001": {
      "label": "Metro Bundler"
    },
    "19002": {
      "label": "Expo DevTools"
    },
    "8081": {
      "label": "React Native Packager"
    }
  },
  "postStartCommand": "npm run dev"
}

// GitHub Actions workflow for testing
// .github/workflows/test.yml
name: Test FootballChess

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint
    
    - name: Run tests
      run: npm test
      
    - name: Build
      run: npm run build

# GitHub Actions workflow for deployment
# .github/workflows/deploy.yml
name: Deploy FootballChess

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-web:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build web
      run: npm run build:web
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        vercel-args: '--prod'
  
  deploy-mobile-beta:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Set up Expo
      uses: expo/expo-github-action@v7
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
    
    - name: Build and publish to Expo
      run: |
        expo login -u ${{ secrets.EXPO_USERNAME }} -p ${{ secrets.EXPO_PASSWORD }}
        expo build:android -t apk
        expo build:ios -t simulator

# Docker Compose for local development
# docker-compose.yml
version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - api
  
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "4000:4000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - JWT_SECRET=dev_secret_key_change_in_production
      - RPC_URL=https://eth-goerli.g.alchemy.com/v2/YOUR_ALCHEMY_KEY
    depends_on:
      - db
  
  db:
    image: postgres:14
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=footballchess

volumes:
  postgres_data:

# Web Dockerfile
# Dockerfile.web
FROM node:18-alpine

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm ci

COPY . .

EXPOSE 3000

CMD ["npm", "run", "dev:web"]

# API Dockerfile
# Dockerfile.api
FROM node:18-alpine

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm ci

COPY . .

EXPOSE 4000

CMD ["npm", "run", "dev:api"]
